//: Playground - noun: a place where people can play

import UIKit

var str = "Hello, playground"
print(str)

var j = 2;
for i in 0 ..< 10{
    j += j*i
}

var one = 1
print("number one is: '\(one)'")

//3
let intVariable: Int = 123;
let doubleVariable: Double = 123.456;
var stringVariable: String = "my string";
var floatVariable: Float = 123.543;
var boolVariable: Bool = true;

print("Int range \(UInt32.min) - \(UInt32.max)");

//4
let decimalFive = 5
let binaryFive = 0b101
let octalFive = 0o5
let hexFive = 5

let zeroPointThirtySix = 36e-2
let longDouble = 123_056_70.980_5
//5
let isitTyple = (2018, "Java", 9)
let (someYear, bestLanguague, languageVerstion) = isitTyple
print("My typle is: \(someYear), \(isitTyple.1), \(languageVerstion)")
//6
let stringWithNumber = "3132"
let stringWithoutNumber = "some string without number"
let canGetNumberFromString = Int(stringWithNumber) //косяк
let cantGetNumberFromString = Int(stringWithoutNumber)
let nilIntVariable: Int? = nil
//7
if var actualNumber = Int(stringWithNumber){
    print("String contains number")
} else {
    print("No number in string")
}
let assumedString: String! = "Неявно развернутая опциональная строка"
//8
/*
    var threeDoubles = [Double](count:3, repeatedValue: 0.5)
    var shopingList:[String] = ["Eggs", "Milk"]
    var shopingListWithoutType = ["Potato", "Cucumber"]
*/
var stringArray = ["one", "two", "three","four", "five"]
stringArray.append("six")
stringArray.append("seven")
let removedString = stringArray.removeFirst()
for(index, value) in stringArray.enumerate(){
    print("\(value)[\(index)]")
}
/*let age = -3
assert(age<0)*/
//9
let secondTyple = (2018, "ISIT", 3)
let defaultColorName = "red"
var userDefinedColorName: String?

var colorNameTOUSer = userDefinedColorName ?? defaultColorName
//10
var daysOfWeek = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
for item in 0...daysOfWeek.count-1{
    print(daysOfWeek[item])
}
/*
not work
for item in 0..daysOfWeek.count{
    print(daysOfWeek[item])
}
*/
for day in daysOfWeek{
    print(day)
}
//11
var variableForInterpolation = 3
let constForInterpolation = 4
print("\(variableForInterpolation)+\(constForInterpolation)=\(variableForInterpolation+constForInterpolation)")
//12
var intNumbersArray = [18,32,233,44,75,86,97,98,49]
for item in intNumbersArray{
    print(item)
}
var arraySum = 0
var cycleIterator = 0
repeat{
    arraySum += intNumbersArray[cycleIterator++]
} while cycleIterator < intNumbersArray.count
print(arraySum)
//13
func arrayIniformation(inputArray: [Int])-> (min:Int, max:Int, sum:Int){
    var min = inputArray[0]
    var max = inputArray[0]
    var sum = 0
    
    for score in inputArray{
        if score > max{
            max = score
        }
        else if score < min {
            min = score
        }
        sum+=score
    }
    return (min, max, sum)
}

print(arrayIniformation([98,23,4523,45,2345,23,45,2345,32,45,32]))

func makeIncrementer() -> (Int -> Int){
    func addOne(number: Int) -> Int{
        return 1 + number
    }
    return addOne;
}
print(makeIncrementer()(4))

func hasAnyMatches(list: [Int], condition: Int -> Bool) -> Bool{
    for item in list{
        if condition(item){
            return true
        }
    }
    return false
}
func lessThanTen(number:Int) -> Bool{
    return number < 10
}
var numbers = [20, 19, 7, 12]
hasAnyMatches(numbers, condition: lessThanTen)// not work without condition
//14

/*my proto*/
protocol MyFirstProtocol{
    //var extraVariable: String {get}
    mutating func veryUsefullFunction()
}

class Student: MyFirstProtocol{
    var name:String
    var course: Int
    init(name:String, course:Int){
        self.name = name
        self.course = course
    }
    func learn() -> String{
        return "My name is \(self.name) and I learn swift for \(self.course) years"
    }
    
    func veryUsefullFunction() {
        self.name += " very useful function has been invoked"
    }
}
var student = Student(name: "Artyom", course: 4)
print(student.learn())
student.name = "Dima"
print(student.learn())
student.veryUsefullFunction()
print(student.learn())
/*
class SuperStudent: Student{
    var value: Double{
        get{
            return self.value * 4
        }
        set{
            self.value = newValue * 4
        }
    }
    
    override init(name:String, course:Int){
        super.init(name: name, course: course)
        self.value = 5.7
    }
    
    override func learn() -> String{
        return "My name is \(self.name) and I learn swift for \(self.course) years and my AVG: \(value)"
    }
}

var superStudent = SuperStudent(name: "Artyom", course: 3)
print(superStudent.learn())
*/
//15
//15
enum Months: Int {
    case jan,feb,mar,apr,may,jun,jul,aug,sep,oct,nov,dec
    func getSeason() -> String {
        switch self {
        case .jan:
            return "winter"
        case .feb:
            return "winter"
        case .mar:
            return "spring"
        case .apr:
            return "spring"
        case .may:
            return "spring"
        case .jun:
            return "summer"
        case .jul:
            return "summer"
        case .aug:
            return "summer"
        default:
            return String(self.rawValue)
        }
    }
}
let season1 = Months.jun
print(season1.getSeason())


var s = Student(name: "Artyom",course: 4)
print(s.learn())

enum Students{
    case Student
    func greet() -> String {
        switch self {
        case .Student:
            return "winter"
        default:
            return "String(self.rawValue)"
        }
    }
}
print(Students.Student)

//15
extension Int: MyFirstProtocol{ // extended
    mutating func veryUsefullFunction(){
        self += 42
    }
}
//16
func stringGeneratorReactor<T:Equatable>(item: T, times:Int)-> [T]{
    var result = [T]()
    
    for _ in 1...times {
        result.append(item)
    }
    return result
}
print(stringGeneratorReactor("someString", times: 3))
